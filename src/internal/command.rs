#[derive(Copy, Clone, Debug)]
pub enum Cmd {
    HeartbeatRequest,
    HeartbeatResponse,
    IdentifyClient,
    ClientIdentified,
    Authenticate,
    Authenticated,
    NotAuthenticated,
    WriteEvents,
    WriteEventsCompleted,
    ReadEvent,
    ReadEventCompleted,
    TransactionStart,
    TransactionStartCompleted,
    TransactionWrite,
    TransactionWriteCompleted,
    TransactionCommit,
    TransactionCommitCompleted,
    ReadStreamEventsForward,
    ReadStreamEventsForwardCompleted,
    ReadStreamEventsBackward,
    ReadStreamEventsBackwardCompleted,
    ReadAllEventsForward,
    ReadAllEventsForwardCompleted,
    ReadAllEventsBackward,
    ReadAllEventsBackwardCompleted,
    DeleteStream,
    DeleteStreamCompleted,
    SubscribeToStream,
    SubscriptionConfirmed,
    StreamEventAppeared,
    UnsubscribeFromStream,
    SubscriptionDropped,
    CreatePersistentSubscription,
    CreatePersistentSubscriptionCompleted,
    UpdatePersistentSubscription,
    UpdatePersistentSubscriptionCompleted,
    DeletePersistentSubscription,
    DeletePersistentSubscriptionCompleted,
    ConnectToPersistentSubscription,
    PersistentSubscriptionConfirmation,
    PersistentSubscriptionStreamEventAppeared,
    PersistentSubscriptionAckEvents,
    PersistentSubscriptionNakEvents,
    BadRequest,
    NotHandled,
    Unknown(u8),
}

impl PartialEq for Cmd {
    fn eq(&self, other: &Cmd) -> bool {
        self.to_u8() == other.to_u8()
    }
}

impl Eq for Cmd {}

impl Cmd {
    pub fn to_u8(self) -> u8 {
        match self {
            Cmd::HeartbeatRequest => 0x01,
            Cmd::HeartbeatResponse => 0x02,
            Cmd::IdentifyClient => 0xF5,
            Cmd::ClientIdentified => 0xF6,
            Cmd::Authenticate => 0xF2,
            Cmd::Authenticated => 0xF3,
            Cmd::NotAuthenticated => 0xF4,
            Cmd::WriteEvents => 0x82,
            Cmd::WriteEventsCompleted => 0x83,
            Cmd::ReadEvent => 0xB0,
            Cmd::ReadEventCompleted => 0xB1,
            Cmd::TransactionStart => 0x84,
            Cmd::TransactionStartCompleted => 0x85,
            Cmd::TransactionWrite => 0x86,
            Cmd::TransactionWriteCompleted => 0x87,
            Cmd::TransactionCommit => 0x88,
            Cmd::TransactionCommitCompleted => 0x89,
            Cmd::ReadStreamEventsForward => 0xB2,
            Cmd::ReadStreamEventsForwardCompleted => 0xB3,
            Cmd::ReadStreamEventsBackward => 0xB4,
            Cmd::ReadStreamEventsBackwardCompleted => 0xB5,
            Cmd::ReadAllEventsForward => 0xB6,
            Cmd::ReadAllEventsForwardCompleted => 0xB7,
            Cmd::ReadAllEventsBackward => 0xB8,
            Cmd::ReadAllEventsBackwardCompleted => 0xB9,
            Cmd::DeleteStream => 0x8A,
            Cmd::DeleteStreamCompleted => 0x8B,
            Cmd::SubscribeToStream => 0xC0,
            Cmd::SubscriptionConfirmed => 0xC1,
            Cmd::StreamEventAppeared => 0xC2,
            Cmd::UnsubscribeFromStream => 0xC3,
            Cmd::SubscriptionDropped => 0xC4,
            Cmd::CreatePersistentSubscription => 0xC8,
            Cmd::CreatePersistentSubscriptionCompleted => 0xC9,
            Cmd::UpdatePersistentSubscription => 0xCE,
            Cmd::UpdatePersistentSubscriptionCompleted => 0xCF,
            Cmd::DeletePersistentSubscription => 0xCA,
            Cmd::DeletePersistentSubscriptionCompleted => 0xCB,
            Cmd::ConnectToPersistentSubscription => 0xC5,
            Cmd::PersistentSubscriptionConfirmation => 0xC6,
            Cmd::PersistentSubscriptionStreamEventAppeared => 0xC7,
            Cmd::PersistentSubscriptionAckEvents => 0xCC,
            Cmd::PersistentSubscriptionNakEvents => 0xCD,
            Cmd::BadRequest => 0xF0,
            Cmd::NotHandled => 0xF1,
            Cmd::Unknown(cmd) => cmd,
        }
    }

    pub fn from_u8(cmd: u8) -> Cmd {
        match cmd {
            0x01 => Cmd::HeartbeatRequest,
            0x02 => Cmd::HeartbeatResponse,
            0xF5 => Cmd::IdentifyClient,
            0xF6 => Cmd::ClientIdentified,
            0xF2 => Cmd::Authenticate,
            0xF3 => Cmd::Authenticated,
            0xF4 => Cmd::NotAuthenticated,
            0x82 => Cmd::WriteEvents,
            0x83 => Cmd::WriteEventsCompleted,
            0xB0 => Cmd::ReadEvent,
            0xB1 => Cmd::ReadEventCompleted,
            0x84 => Cmd::TransactionStart,
            0x85 => Cmd::TransactionStartCompleted,
            0x86 => Cmd::TransactionWrite,
            0x87 => Cmd::TransactionWriteCompleted,
            0x88 => Cmd::TransactionCommit,
            0x89 => Cmd::TransactionCommitCompleted,
            0xB2 => Cmd::ReadStreamEventsForward,
            0xB3 => Cmd::ReadStreamEventsForwardCompleted,
            0xB4 => Cmd::ReadStreamEventsBackward,
            0xB5 => Cmd::ReadStreamEventsBackwardCompleted,
            0xB6 => Cmd::ReadAllEventsForward,
            0xB7 => Cmd::ReadAllEventsForwardCompleted,
            0xB8 => Cmd::ReadAllEventsBackward,
            0xB9 => Cmd::ReadAllEventsBackwardCompleted,
            0x8A => Cmd::DeleteStream,
            0x8B => Cmd::DeleteStreamCompleted,
            0xC0 => Cmd::SubscribeToStream,
            0xC1 => Cmd::SubscriptionConfirmed,
            0xC2 => Cmd::StreamEventAppeared,
            0xC3 => Cmd::UnsubscribeFromStream,
            0xC4 => Cmd::SubscriptionDropped,
            0xC5 => Cmd::ConnectToPersistentSubscription,
            0xC8 => Cmd::CreatePersistentSubscription,
            0xC9 => Cmd::CreatePersistentSubscriptionCompleted,
            0xCE => Cmd::UpdatePersistentSubscription,
            0xCF => Cmd::UpdatePersistentSubscriptionCompleted,
            0xCA => Cmd::DeletePersistentSubscription,
            0xCB => Cmd::DeletePersistentSubscriptionCompleted,
            0xC6 => Cmd::PersistentSubscriptionConfirmation,
            0xC7 => Cmd::PersistentSubscriptionStreamEventAppeared,
            0xCC => Cmd::PersistentSubscriptionAckEvents,
            0xCD => Cmd::PersistentSubscriptionNakEvents,
            0xF0 => Cmd::BadRequest,
            0xF1 => Cmd::NotHandled,
            _ => Cmd::Unknown(cmd),
        }
    }
}
